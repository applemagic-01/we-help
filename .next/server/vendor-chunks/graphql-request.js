"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-request";
exports.ids = ["vendor-chunks/graphql-request"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultJsonSerializer = void 0;\nexports.defaultJsonSerializer = JSON; //# sourceMappingURL=defaultJsonSerializer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckNBLDZCQUE2QixHQUFHRyxNQUNoQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLXNlcnZpY2Utd2ViLWFwcC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL2RlZmF1bHRKc29uU2VyaWFsaXplci5qcz9mYzUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0SnNvblNlcmlhbGl6ZXIgPSB2b2lkIDA7XG5leHBvcnRzLmRlZmF1bHRKc29uU2VyaWFsaXplciA9IEpTT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdEpzb25TZXJpYWxpemVyIiwiSlNPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/graphql-ws.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GraphQLWebSocketClient = void 0;\n/* eslint-disable */ const resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/types.js\");\n// import type WebSocket from 'ws'\nconst CONNECTION_INIT = `connection_init`;\nconst CONNECTION_ACK = `connection_ack`;\nconst PING = `ping`;\nconst PONG = `pong`;\nconst SUBSCRIBE = `subscribe`;\nconst NEXT = `next`;\nconst ERROR = `error`;\nconst COMPLETE = `complete`;\nclass GraphQLWebSocketMessage {\n    get type() {\n        return this._type;\n    }\n    get id() {\n        return this._id;\n    }\n    get payload() {\n        return this._payload;\n    }\n    constructor(type, payload, id){\n        this._type = type;\n        this._payload = payload;\n        this._id = id;\n    }\n    get text() {\n        const result = {\n            type: this.type\n        };\n        if (this.id != null && this.id != undefined) result.id = this.id;\n        if (this.payload != null && this.payload != undefined) result.payload = this.payload;\n        return JSON.stringify(result);\n    }\n    static parse(data, f) {\n        const { type, payload, id } = JSON.parse(data);\n        return new GraphQLWebSocketMessage(type, f(payload), id);\n    }\n}\nclass GraphQLWebSocketClient {\n    constructor(socket, { onInit, onAcknowledged, onPing, onPong }){\n        this.socketState = {\n            acknowledged: false,\n            lastRequestId: 0,\n            subscriptions: {}\n        };\n        this.socket = socket;\n        socket.addEventListener(`open`, async (e)=>{\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n            socket.send(ConnectionInit(onInit ? await onInit() : null).text);\n        });\n        socket.addEventListener(`close`, (e)=>{\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n        });\n        socket.addEventListener(`error`, (e)=>{\n            console.error(e);\n        });\n        socket.addEventListener(`message`, (e)=>{\n            try {\n                const message = parseMessage(e.data);\n                switch(message.type){\n                    case CONNECTION_ACK:\n                        {\n                            if (this.socketState.acknowledged) {\n                                console.warn(`Duplicate CONNECTION_ACK message ignored`);\n                            } else {\n                                this.socketState.acknowledged = true;\n                                if (onAcknowledged) onAcknowledged(message.payload);\n                            }\n                            return;\n                        }\n                    case PING:\n                        {\n                            if (onPing) onPing(message.payload).then((r)=>socket.send(Pong(r).text));\n                            else socket.send(Pong(null).text);\n                            return;\n                        }\n                    case PONG:\n                        {\n                            if (onPong) onPong(message.payload);\n                            return;\n                        }\n                }\n                if (!this.socketState.acknowledged) {\n                    // Web-socket connection not acknowledged\n                    return;\n                }\n                if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n                    // No subscription identifer or subscription indentifier is not found\n                    return;\n                }\n                const { query, variables, subscriber } = this.socketState.subscriptions[message.id];\n                switch(message.type){\n                    case NEXT:\n                        {\n                            if (!message.payload.errors && message.payload.data) {\n                                subscriber.next && subscriber.next(message.payload.data);\n                            }\n                            if (message.payload.errors) {\n                                subscriber.error && subscriber.error(new types_js_1.ClientError({\n                                    ...message.payload,\n                                    status: 200\n                                }, {\n                                    query,\n                                    variables\n                                }));\n                            } else {}\n                            return;\n                        }\n                    case ERROR:\n                        {\n                            subscriber.error && subscriber.error(new types_js_1.ClientError({\n                                errors: message.payload,\n                                status: 200\n                            }, {\n                                query,\n                                variables\n                            }));\n                            return;\n                        }\n                    case COMPLETE:\n                        {\n                            subscriber.complete && subscriber.complete();\n                            delete this.socketState.subscriptions[message.id];\n                            return;\n                        }\n                }\n            } catch (e) {\n                // Unexpected errors while handling graphql-ws message\n                console.error(e);\n                socket.close(1006);\n            }\n            socket.close(4400, `Unknown graphql-ws message.`);\n        });\n    }\n    makeSubscribe(query, operationName, subscriber, variables) {\n        const subscriptionId = (this.socketState.lastRequestId++).toString();\n        this.socketState.subscriptions[subscriptionId] = {\n            query,\n            variables,\n            subscriber\n        };\n        this.socket.send(Subscribe(subscriptionId, {\n            query,\n            operationName,\n            variables\n        }).text);\n        return ()=>{\n            this.socket.send(Complete(subscriptionId).text);\n            delete this.socketState.subscriptions[subscriptionId];\n        };\n    }\n    rawRequest(query, variables) {\n        return new Promise((resolve, reject)=>{\n            let result;\n            this.rawSubscribe(query, {\n                next: (data, extensions)=>result = {\n                        data,\n                        extensions\n                    },\n                error: reject,\n                complete: ()=>resolve(result)\n            }, variables);\n        });\n    }\n    request(document, variables) {\n        return new Promise((resolve, reject)=>{\n            let result;\n            this.subscribe(document, {\n                next: (data)=>result = data,\n                error: reject,\n                complete: ()=>resolve(result)\n            }, variables);\n        });\n    }\n    subscribe(document, subscriber, variables) {\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(document);\n        return this.makeSubscribe(query, operationName, subscriber, variables);\n    }\n    rawSubscribe(query, subscriber, variables) {\n        return this.makeSubscribe(query, undefined, subscriber, variables);\n    }\n    ping(payload) {\n        this.socket.send(Ping(payload).text);\n    }\n    close() {\n        this.socket.close(1000);\n    }\n}\nGraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;\nexports.GraphQLWebSocketClient = GraphQLWebSocketClient;\n// Helper functions\nfunction parseMessage(data, f = (a)=>a) {\n    const m = GraphQLWebSocketMessage.parse(data, f);\n    return m;\n}\nfunction ConnectionInit(payload) {\n    return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);\n}\nfunction Ping(payload) {\n    return new GraphQLWebSocketMessage(PING, payload, undefined);\n}\nfunction Pong(payload) {\n    return new GraphQLWebSocketMessage(PONG, payload, undefined);\n}\nfunction Subscribe(id, payload) {\n    return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);\n}\nfunction Complete(id) {\n    return new GraphQLWebSocketMessage(COMPLETE, undefined, id);\n} //# sourceMappingURL=graphql-ws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HeadersInstanceToPlainObject = exports.uppercase = void 0;\nconst uppercase = (str)=>str.toUpperCase();\nexports.uppercase = uppercase;\n/**\n * Convert Headers instance into regular object\n */ const HeadersInstanceToPlainObject = (headers)=>{\n    const o = {};\n    headers.forEach((v, k)=>{\n        o[k] = v;\n    });\n    return o;\n};\nexports.HeadersInstanceToPlainObject = HeadersInstanceToPlainObject; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQ0FBb0MsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUNoRSxNQUFNRyxZQUFZLENBQUNDLE1BQVFBLElBQUlDLFdBQVc7QUFDMUNMLGlCQUFpQixHQUFHRztBQUNwQjs7Q0FFQyxHQUNELE1BQU1ELCtCQUErQixDQUFDSTtJQUNsQyxNQUFNQyxJQUFJLENBQUM7SUFDWEQsUUFBUUUsT0FBTyxDQUFDLENBQUNDLEdBQUdDO1FBQ2hCSCxDQUFDLENBQUNHLEVBQUUsR0FBR0Q7SUFDWDtJQUNBLE9BQU9GO0FBQ1g7QUFDQVAsb0NBQW9DLEdBQUdFLDhCQUN2QyxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLXNlcnZpY2Utd2ViLWFwcC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL2hlbHBlcnMuanM/MzEyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdCA9IGV4cG9ydHMudXBwZXJjYXNlID0gdm9pZCAwO1xuY29uc3QgdXBwZXJjYXNlID0gKHN0cikgPT4gc3RyLnRvVXBwZXJDYXNlKCk7XG5leHBvcnRzLnVwcGVyY2FzZSA9IHVwcGVyY2FzZTtcbi8qKlxuICogQ29udmVydCBIZWFkZXJzIGluc3RhbmNlIGludG8gcmVndWxhciBvYmplY3RcbiAqL1xuY29uc3QgSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdCA9IChoZWFkZXJzKSA9PiB7XG4gICAgY29uc3QgbyA9IHt9O1xuICAgIGhlYWRlcnMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICBvW2tdID0gdjtcbiAgICB9KTtcbiAgICByZXR1cm4gbztcbn07XG5leHBvcnRzLkhlYWRlcnNJbnN0YW5jZVRvUGxhaW5PYmplY3QgPSBIZWFkZXJzSW5zdGFuY2VUb1BsYWluT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJIZWFkZXJzSW5zdGFuY2VUb1BsYWluT2JqZWN0IiwidXBwZXJjYXNlIiwic3RyIiwidG9VcHBlckNhc2UiLCJoZWFkZXJzIiwibyIsImZvckVhY2giLCJ2IiwiayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = exports.batchRequests = exports.resolveRequestDocument = exports.GraphQLWebSocketClient = exports.gql = void 0;\nconst defaultJsonSerializer_js_1 = __webpack_require__(/*! ./defaultJsonSerializer.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/defaultJsonSerializer.js\");\nconst helpers_js_1 = __webpack_require__(/*! ./helpers.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/helpers.js\");\nconst parseArgs_js_1 = __webpack_require__(/*! ./parseArgs.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js\");\nconst resolveRequestDocument_js_1 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nconst types_js_1 = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/types.js\");\nObject.defineProperty(exports, \"ClientError\", ({\n    enumerable: true,\n    get: function() {\n        return types_js_1.ClientError;\n    }\n}));\nconst cross_fetch_1 = __importStar(__webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\")), CrossFetch = cross_fetch_1;\n/**\n * Convert the given headers configuration into a plain object.\n */ const resolveHeaders = (headers)=>{\n    let oHeaders = {};\n    if (headers) {\n        if (typeof Headers !== `undefined` && headers instanceof Headers || CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers) {\n            oHeaders = (0, helpers_js_1.HeadersInstanceToPlainObject)(headers);\n        } else if (Array.isArray(headers)) {\n            headers.forEach(([name, value])=>{\n                if (name && value !== undefined) {\n                    oHeaders[name] = value;\n                }\n            });\n        } else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */ const cleanQuery = (str)=>str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\n/**\n * Create query string for GraphQL request\n */ const buildRequestConfig = (params)=>{\n    if (!Array.isArray(params.query)) {\n        const params_ = params;\n        const search = [\n            `query=${encodeURIComponent(cleanQuery(params_.query))}`\n        ];\n        if (params.variables) {\n            search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`);\n        }\n        if (params_.operationName) {\n            search.push(`operationName=${encodeURIComponent(params_.operationName)}`);\n        }\n        return search.join(`&`);\n    }\n    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n        throw new Error(`Cannot create query with given variable type, array expected`);\n    }\n    // Batch support\n    const params_ = params;\n    const payload = params.query.reduce((acc, currentQuery, index)=>{\n        acc.push({\n            query: cleanQuery(currentQuery),\n            variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined\n        });\n        return acc;\n    }, []);\n    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;\n};\nconst createHttpMethodFetcher = (method)=>async (params)=>{\n        const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params;\n        const headers = {\n            ...params.headers\n        };\n        let queryParams = ``;\n        let body = undefined;\n        if (method === `POST`) {\n            body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);\n            if (typeof body === `string`) {\n                // @ts-expect-error todo\n                headers[`Content-Type`] = `application/json`;\n            }\n        } else {\n            // @ts-expect-error todo needs ADT for TS to understand the different states\n            queryParams = buildRequestConfig({\n                query,\n                variables,\n                operationName,\n                jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer\n            });\n        }\n        const init = {\n            method,\n            headers,\n            body,\n            ...fetchOptions\n        };\n        let urlResolved = url;\n        let initResolved = init;\n        if (middleware) {\n            const result = await Promise.resolve(middleware({\n                ...init,\n                url,\n                operationName,\n                variables\n            }));\n            const { url: urlNew, ...initNew } = result;\n            urlResolved = urlNew;\n            initResolved = initNew;\n        }\n        if (queryParams) {\n            urlResolved = `${urlResolved}?${queryParams}`;\n        }\n        return await fetch(urlResolved, initResolved);\n    };\n/**\n * GraphQL Client.\n */ class GraphQLClient {\n    constructor(url, requestConfig = {}){\n        this.url = url;\n        this.requestConfig = requestConfig;\n        /**\n         * Send a GraphQL query to the server.\n         */ this.rawRequest = async (...args)=>{\n            const [queryOrOptions, variables, requestHeaders] = args;\n            const rawRequestOptions = (0, parseArgs_js_1.parseRawRequestArgs)(queryOrOptions, variables, requestHeaders);\n            const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n            const { url } = this;\n            if (rawRequestOptions.signal !== undefined) {\n                fetchOptions.signal = rawRequestOptions.signal;\n            }\n            const { operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(rawRequestOptions.query);\n            return makeRequest({\n                url,\n                query: rawRequestOptions.query,\n                variables: rawRequestOptions.variables,\n                headers: {\n                    ...resolveHeaders(callOrIdentity(headers)),\n                    ...resolveHeaders(rawRequestOptions.requestHeaders)\n                },\n                operationName,\n                fetch,\n                method,\n                fetchOptions,\n                middleware: requestMiddleware\n            }).then((response)=>{\n                if (responseMiddleware) {\n                    responseMiddleware(response);\n                }\n                return response;\n            }).catch((error)=>{\n                if (responseMiddleware) {\n                    responseMiddleware(error);\n                }\n                throw error;\n            });\n        };\n    }\n    async request(documentOrOptions, ...variablesAndRequestHeaders) {\n        const [variables, requestHeaders] = variablesAndRequestHeaders;\n        const requestOptions = (0, parseArgs_js_1.parseRequestArgs)(documentOrOptions, variables, requestHeaders);\n        const { headers, fetch = cross_fetch_1.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n        const { url } = this;\n        if (requestOptions.signal !== undefined) {\n            fetchOptions.signal = requestOptions.signal;\n        }\n        const { query, operationName } = (0, resolveRequestDocument_js_1.resolveRequestDocument)(requestOptions.document);\n        return makeRequest({\n            url,\n            query,\n            variables: requestOptions.variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(requestOptions.requestHeaders)\n            },\n            operationName,\n            fetch,\n            method,\n            fetchOptions,\n            middleware: requestMiddleware\n        }).then((response)=>{\n            if (responseMiddleware) {\n                responseMiddleware(response);\n            }\n            return response.data;\n        }).catch((error)=>{\n            if (responseMiddleware) {\n                responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    // prettier-ignore\n    batchRequests(documentsOrOptions, requestHeaders) {\n        const batchRequestOptions = (0, parseArgs_js_1.parseBatchRequestArgs)(documentsOrOptions, requestHeaders);\n        const { headers, ...fetchOptions } = this.requestConfig;\n        if (batchRequestOptions.signal !== undefined) {\n            fetchOptions.signal = batchRequestOptions.signal;\n        }\n        const queries = batchRequestOptions.documents.map(({ document })=>(0, resolveRequestDocument_js_1.resolveRequestDocument)(document).query);\n        const variables = batchRequestOptions.documents.map(({ variables })=>variables);\n        return makeRequest({\n            url: this.url,\n            query: queries,\n            // @ts-expect-error TODO reconcile batch variables into system.\n            variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(batchRequestOptions.requestHeaders)\n            },\n            operationName: undefined,\n            fetch: this.requestConfig.fetch ?? cross_fetch_1.default,\n            method: this.requestConfig.method || `POST`,\n            fetchOptions,\n            middleware: this.requestConfig.requestMiddleware\n        }).then((response)=>{\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(response);\n            }\n            return response.data;\n        }).catch((error)=>{\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    setHeaders(headers) {\n        this.requestConfig.headers = headers;\n        return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */ setHeader(key, value) {\n        const { headers } = this.requestConfig;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-expect-error todo\n            headers[key] = value;\n        } else {\n            this.requestConfig.headers = {\n                [key]: value\n            };\n        }\n        return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */ setEndpoint(value) {\n        this.url = value;\n        return this;\n    }\n}\nexports.GraphQLClient = GraphQLClient;\nconst makeRequest = async (params)=>{\n    const { query, variables, fetchOptions } = params;\n    const fetcher = createHttpMethodFetcher((0, helpers_js_1.uppercase)(params.method ?? `post`));\n    const isBatchingQuery = Array.isArray(params.query);\n    const response = await fetcher(params);\n    const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer);\n    const successfullyReceivedData = Array.isArray(result) ? !result.some(({ data })=>!data) : Boolean(result.data);\n    const successfullyPassedErrorPolicy = Array.isArray(result) || !result.errors || Array.isArray(result.errors) && !result.errors.length || fetchOptions.errorPolicy === `all` || fetchOptions.errorPolicy === `ignore`;\n    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n        // @ts-expect-error TODO fixme\n        const { errors: _, ...rest } = Array.isArray(result) ? result : result;\n        const data = fetchOptions.errorPolicy === `ignore` ? rest : result;\n        const dataEnvelope = isBatchingQuery ? {\n            data\n        } : data;\n        // @ts-expect-error TODO\n        return {\n            ...dataEnvelope,\n            headers: response.headers,\n            status: response.status\n        };\n    } else {\n        const errorResult = typeof result === `string` ? {\n            error: result\n        } : result;\n        throw new types_js_1.ClientError(// @ts-expect-error TODO\n        {\n            ...errorResult,\n            status: response.status,\n            headers: response.headers\n        }, {\n            query,\n            variables\n        });\n    }\n};\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */ const rawRequest = async (...args)=>{\n    const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n    const requestOptions = (0, parseArgs_js_1.parseRawRequestExtendedArgs)(urlOrOptions, query, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.rawRequest({\n        ...requestOptions\n    });\n};\nexports.rawRequest = rawRequest;\n// prettier-ignore\n// eslint-disable-next-line\nasync function request(urlOrOptions, document, ...variablesAndRequestHeaders) {\n    const requestOptions = (0, parseArgs_js_1.parseRequestExtendedArgs)(urlOrOptions, document, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.request({\n        ...requestOptions\n    });\n}\nexports.request = request;\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */ const batchRequests = async (...args)=>{\n    const params = parseBatchRequestsArgsExtended(args);\n    const client = new GraphQLClient(params.url);\n    return client.batchRequests(params);\n};\nexports.batchRequests = batchRequests;\nconst parseBatchRequestsArgsExtended = (args)=>{\n    if (args.length === 1) {\n        return args[0];\n    } else {\n        return {\n            url: args[0],\n            documents: args[1],\n            requestHeaders: args[2],\n            signal: undefined\n        };\n    }\n};\nconst createRequestBody = (query, variables, operationName, jsonSerializer)=>{\n    const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer_js_1.defaultJsonSerializer;\n    if (!Array.isArray(query)) {\n        return jsonSerializer_.stringify({\n            query,\n            variables,\n            operationName\n        });\n    }\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n        throw new Error(`Cannot create request body with given variable type, array expected`);\n    }\n    // Batch support\n    const payload = query.reduce((acc, currentQuery, index)=>{\n        acc.push({\n            query: currentQuery,\n            variables: variables ? variables[index] : undefined\n        });\n        return acc;\n    }, []);\n    return jsonSerializer_.stringify(payload);\n};\nconst getResult = async (response, jsonSerializer)=>{\n    let contentType;\n    response.headers.forEach((value, key)=>{\n        if (key.toLowerCase() === `content-type`) {\n            contentType = value;\n        }\n    });\n    if (contentType && (contentType.toLowerCase().startsWith(`application/json`) || contentType.toLowerCase().startsWith(`application/graphql+json`) || contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {\n        return jsonSerializer.parse(await response.text());\n    } else {\n        return response.text();\n    }\n};\nconst callOrIdentity = (value)=>{\n    return typeof value === `function` ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */ const gql = (chunks, ...variables)=>{\n    return chunks.reduce((acc, chunk, index)=>`${acc}${chunk}${index in variables ? String(variables[index]) : ``}`, ``);\n};\nexports.gql = gql;\nvar graphql_ws_js_1 = __webpack_require__(/*! ./graphql-ws.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/graphql-ws.js\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", ({\n    enumerable: true,\n    get: function() {\n        return graphql_ws_js_1.GraphQLWebSocketClient;\n    }\n}));\nvar resolveRequestDocument_js_2 = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\");\nObject.defineProperty(exports, \"resolveRequestDocument\", ({\n    enumerable: true,\n    get: function() {\n        return resolveRequestDocument_js_2.resolveRequestDocument;\n    }\n}));\nexports[\"default\"] = request; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/parseArgs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;\nconst parseRequestArgs = (documentOrOptions, variables, requestHeaders)=>{\n    return documentOrOptions.document ? documentOrOptions : {\n        document: documentOrOptions,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined\n    };\n};\nexports.parseRequestArgs = parseRequestArgs;\nconst parseRawRequestArgs = (queryOrOptions, variables, requestHeaders)=>{\n    return queryOrOptions.query ? queryOrOptions : {\n        query: queryOrOptions,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined\n    };\n};\nexports.parseRawRequestArgs = parseRawRequestArgs;\nconst parseBatchRequestArgs = (documentsOrOptions, requestHeaders)=>{\n    return documentsOrOptions.documents ? documentsOrOptions : {\n        documents: documentsOrOptions,\n        requestHeaders: requestHeaders,\n        signal: undefined\n    };\n};\nexports.parseBatchRequestArgs = parseBatchRequestArgs;\nconst parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders)=>{\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.document ? urlOrOptions : {\n        url: urlOrOptions,\n        document: document,\n        variables,\n        requestHeaders,\n        signal: undefined\n    };\n};\nexports.parseRequestExtendedArgs = parseRequestExtendedArgs;\nconst parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders)=>{\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.query ? urlOrOptions : {\n        url: urlOrOptions,\n        query: query,\n        variables,\n        requestHeaders,\n        signal: undefined\n    };\n};\nexports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs; //# sourceMappingURL=parseArgs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9wYXJzZUFyZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1DQUFtQyxHQUFHQSxnQ0FBZ0MsR0FBR0EsNkJBQTZCLEdBQUdBLDJCQUEyQixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ3ZLLE1BQU1NLG1CQUFtQixDQUFDQyxtQkFBbUJDLFdBQVdDO0lBQ3BELE9BQU9GLGtCQUFrQkcsUUFBUSxHQUMzQkgsb0JBQ0E7UUFDRUcsVUFBVUg7UUFDVkMsV0FBV0E7UUFDWEMsZ0JBQWdCQTtRQUNoQkUsUUFBUUM7SUFDWjtBQUNSO0FBQ0FaLHdCQUF3QixHQUFHTTtBQUMzQixNQUFNRCxzQkFBc0IsQ0FBQ1EsZ0JBQWdCTCxXQUFXQztJQUNwRCxPQUFPSSxlQUFlQyxLQUFLLEdBQ3JCRCxpQkFDQTtRQUNFQyxPQUFPRDtRQUNQTCxXQUFXQTtRQUNYQyxnQkFBZ0JBO1FBQ2hCRSxRQUFRQztJQUNaO0FBQ1I7QUFDQVosMkJBQTJCLEdBQUdLO0FBQzlCLE1BQU1ELHdCQUF3QixDQUFDVyxvQkFBb0JOO0lBQy9DLE9BQU9NLG1CQUFtQkMsU0FBUyxHQUM3QkQscUJBQ0E7UUFDRUMsV0FBV0Q7UUFDWE4sZ0JBQWdCQTtRQUNoQkUsUUFBUUM7SUFDWjtBQUNSO0FBQ0FaLDZCQUE2QixHQUFHSTtBQUNoQyxNQUFNRCwyQkFBMkIsQ0FBQ2MsY0FBY1AsVUFBVSxHQUFHUTtJQUN6RCxNQUFNLENBQUNWLFdBQVdDLGVBQWUsR0FBR1M7SUFDcEMsT0FBT0QsYUFBYVAsUUFBUSxHQUN0Qk8sZUFDQTtRQUNFRSxLQUFLRjtRQUNMUCxVQUFVQTtRQUNWRjtRQUNBQztRQUNBRSxRQUFRQztJQUNaO0FBQ1I7QUFDQVosZ0NBQWdDLEdBQUdHO0FBQ25DLE1BQU1ELDhCQUE4QixDQUFDZSxjQUFjSCxPQUFPLEdBQUdJO0lBQ3pELE1BQU0sQ0FBQ1YsV0FBV0MsZUFBZSxHQUFHUztJQUNwQyxPQUFPRCxhQUFhSCxLQUFLLEdBQ25CRyxlQUNBO1FBQ0VFLEtBQUtGO1FBQ0xILE9BQU9BO1FBQ1BOO1FBQ0FDO1FBQ0FFLFFBQVFDO0lBQ1o7QUFDUjtBQUNBWixtQ0FBbUMsR0FBR0UsNkJBQ3RDLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtc2VydmljZS13ZWItYXBwLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvcGFyc2VBcmdzLmpzPzYzYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlUmF3UmVxdWVzdEV4dGVuZGVkQXJncyA9IGV4cG9ydHMucGFyc2VSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gZXhwb3J0cy5wYXJzZUJhdGNoUmVxdWVzdEFyZ3MgPSBleHBvcnRzLnBhcnNlUmF3UmVxdWVzdEFyZ3MgPSBleHBvcnRzLnBhcnNlUmVxdWVzdEFyZ3MgPSB2b2lkIDA7XG5jb25zdCBwYXJzZVJlcXVlc3RBcmdzID0gKGRvY3VtZW50T3JPcHRpb25zLCB2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50T3JPcHRpb25zLmRvY3VtZW50XG4gICAgICAgID8gZG9jdW1lbnRPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBkb2N1bWVudDogZG9jdW1lbnRPck9wdGlvbnMsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydHMucGFyc2VSZXF1ZXN0QXJncyA9IHBhcnNlUmVxdWVzdEFyZ3M7XG5jb25zdCBwYXJzZVJhd1JlcXVlc3RBcmdzID0gKHF1ZXJ5T3JPcHRpb25zLCB2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIHF1ZXJ5T3JPcHRpb25zLnF1ZXJ5XG4gICAgICAgID8gcXVlcnlPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBxdWVyeTogcXVlcnlPck9wdGlvbnMsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0QXJncyA9IHBhcnNlUmF3UmVxdWVzdEFyZ3M7XG5jb25zdCBwYXJzZUJhdGNoUmVxdWVzdEFyZ3MgPSAoZG9jdW1lbnRzT3JPcHRpb25zLCByZXF1ZXN0SGVhZGVycykgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudHNPck9wdGlvbnMuZG9jdW1lbnRzXG4gICAgICAgID8gZG9jdW1lbnRzT3JPcHRpb25zXG4gICAgICAgIDoge1xuICAgICAgICAgICAgZG9jdW1lbnRzOiBkb2N1bWVudHNPck9wdGlvbnMsXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgICBzaWduYWw6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbn07XG5leHBvcnRzLnBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IHBhcnNlQmF0Y2hSZXF1ZXN0QXJncztcbmNvbnN0IHBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncyA9ICh1cmxPck9wdGlvbnMsIGRvY3VtZW50LCAuLi52YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycykgPT4ge1xuICAgIGNvbnN0IFt2YXJpYWJsZXMsIHJlcXVlc3RIZWFkZXJzXSA9IHZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzO1xuICAgIHJldHVybiB1cmxPck9wdGlvbnMuZG9jdW1lbnRcbiAgICAgICAgPyB1cmxPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICB1cmw6IHVybE9yT3B0aW9ucyxcbiAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudCxcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0cy5wYXJzZVJlcXVlc3RFeHRlbmRlZEFyZ3MgPSBwYXJzZVJlcXVlc3RFeHRlbmRlZEFyZ3M7XG5jb25zdCBwYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3MgPSAodXJsT3JPcHRpb25zLCBxdWVyeSwgLi4udmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBbdmFyaWFibGVzLCByZXF1ZXN0SGVhZGVyc10gPSB2YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycztcbiAgICByZXR1cm4gdXJsT3JPcHRpb25zLnF1ZXJ5XG4gICAgICAgID8gdXJsT3JPcHRpb25zXG4gICAgICAgIDoge1xuICAgICAgICAgICAgdXJsOiB1cmxPck9wdGlvbnMsXG4gICAgICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydHMucGFyc2VSYXdSZXF1ZXN0RXh0ZW5kZWRBcmdzID0gcGFyc2VSYXdSZXF1ZXN0RXh0ZW5kZWRBcmdzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VBcmdzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhcnNlUmF3UmVxdWVzdEV4dGVuZGVkQXJncyIsInBhcnNlUmVxdWVzdEV4dGVuZGVkQXJncyIsInBhcnNlQmF0Y2hSZXF1ZXN0QXJncyIsInBhcnNlUmF3UmVxdWVzdEFyZ3MiLCJwYXJzZVJlcXVlc3RBcmdzIiwiZG9jdW1lbnRPck9wdGlvbnMiLCJ2YXJpYWJsZXMiLCJyZXF1ZXN0SGVhZGVycyIsImRvY3VtZW50Iiwic2lnbmFsIiwidW5kZWZpbmVkIiwicXVlcnlPck9wdGlvbnMiLCJxdWVyeSIsImRvY3VtZW50c09yT3B0aW9ucyIsImRvY3VtZW50cyIsInVybE9yT3B0aW9ucyIsInZhcmlhYmxlc0FuZFJlcXVlc3RIZWFkZXJzIiwidXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/parseArgs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/resolveRequestDocument.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.resolveRequestDocument = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.mjs\");\n/**\n * helpers\n */ const extractOperationName = (document)=>{\n    let operationName = undefined;\n    const operationDefinitions = document.definitions.filter((definition)=>definition.kind === `OperationDefinition`);\n    if (operationDefinitions.length === 1) {\n        operationName = operationDefinitions[0]?.name?.value;\n    }\n    return operationName;\n};\nconst resolveRequestDocument = (document)=>{\n    if (typeof document === `string`) {\n        let operationName = undefined;\n        try {\n            const parsedDocument = (0, graphql_1.parse)(document);\n            operationName = extractOperationName(parsedDocument);\n        } catch (err) {\n        // Failed parsing the document, the operationName will be undefined\n        }\n        return {\n            query: document,\n            operationName\n        };\n    }\n    const operationName = extractOperationName(document);\n    return {\n        query: (0, graphql_1.print)(document),\n        operationName\n    };\n};\nexports.resolveRequestDocument = resolveRequestDocument; //# sourceMappingURL=resolveRequestDocument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw4QkFBOEIsR0FBRyxLQUFLO0FBQ3RDLE1BQU1HLFlBQVlDLG1CQUFPQSxDQUFDLHVEQUFTO0FBQ25DOztDQUVDLEdBQ0QsTUFBTUMsdUJBQXVCLENBQUNDO0lBQzFCLElBQUlDLGdCQUFnQkM7SUFDcEIsTUFBTUMsdUJBQXVCSCxTQUFTSSxXQUFXLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxhQUFlQSxXQUFXQyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztJQUNsSCxJQUFJSixxQkFBcUJLLE1BQU0sS0FBSyxHQUFHO1FBQ25DUCxnQkFBZ0JFLG9CQUFvQixDQUFDLEVBQUUsRUFBRU0sTUFBTWQ7SUFDbkQ7SUFDQSxPQUFPTTtBQUNYO0FBQ0EsTUFBTUwseUJBQXlCLENBQUNJO0lBQzVCLElBQUksT0FBT0EsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzlCLElBQUlDLGdCQUFnQkM7UUFDcEIsSUFBSTtZQUNBLE1BQU1RLGlCQUFpQixDQUFDLEdBQUdiLFVBQVVjLEtBQUssRUFBRVg7WUFDNUNDLGdCQUFnQkYscUJBQXFCVztRQUN6QyxFQUNBLE9BQU9FLEtBQUs7UUFDUixtRUFBbUU7UUFDdkU7UUFDQSxPQUFPO1lBQUVDLE9BQU9iO1lBQVVDO1FBQWM7SUFDNUM7SUFDQSxNQUFNQSxnQkFBZ0JGLHFCQUFxQkM7SUFDM0MsT0FBTztRQUFFYSxPQUFPLENBQUMsR0FBR2hCLFVBQVVpQixLQUFLLEVBQUVkO1FBQVdDO0lBQWM7QUFDbEU7QUFDQVAsOEJBQThCLEdBQUdFLHdCQUNqQyxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ob21lLXNlcnZpY2Utd2ViLWFwcC8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvY2pzL3Jlc29sdmVSZXF1ZXN0RG9jdW1lbnQuanM/YjY4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzb2x2ZVJlcXVlc3REb2N1bWVudCA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuLyoqXG4gKiBoZWxwZXJzXG4gKi9cbmNvbnN0IGV4dHJhY3RPcGVyYXRpb25OYW1lID0gKGRvY3VtZW50KSA9PiB7XG4gICAgbGV0IG9wZXJhdGlvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgb3BlcmF0aW9uRGVmaW5pdGlvbnMgPSBkb2N1bWVudC5kZWZpbml0aW9ucy5maWx0ZXIoKGRlZmluaXRpb24pID0+IGRlZmluaXRpb24ua2luZCA9PT0gYE9wZXJhdGlvbkRlZmluaXRpb25gKTtcbiAgICBpZiAob3BlcmF0aW9uRGVmaW5pdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIG9wZXJhdGlvbk5hbWUgPSBvcGVyYXRpb25EZWZpbml0aW9uc1swXT8ubmFtZT8udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRpb25OYW1lO1xufTtcbmNvbnN0IHJlc29sdmVSZXF1ZXN0RG9jdW1lbnQgPSAoZG9jdW1lbnQpID0+IHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBgc3RyaW5nYCkge1xuICAgICAgICBsZXQgb3BlcmF0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZERvY3VtZW50ID0gKDAsIGdyYXBocWxfMS5wYXJzZSkoZG9jdW1lbnQpO1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZSA9IGV4dHJhY3RPcGVyYXRpb25OYW1lKHBhcnNlZERvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBGYWlsZWQgcGFyc2luZyB0aGUgZG9jdW1lbnQsIHRoZSBvcGVyYXRpb25OYW1lIHdpbGwgYmUgdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcXVlcnk6IGRvY3VtZW50LCBvcGVyYXRpb25OYW1lIH07XG4gICAgfVxuICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBleHRyYWN0T3BlcmF0aW9uTmFtZShkb2N1bWVudCk7XG4gICAgcmV0dXJuIHsgcXVlcnk6ICgwLCBncmFwaHFsXzEucHJpbnQpKGRvY3VtZW50KSwgb3BlcmF0aW9uTmFtZSB9O1xufTtcbmV4cG9ydHMucmVzb2x2ZVJlcXVlc3REb2N1bWVudCA9IHJlc29sdmVSZXF1ZXN0RG9jdW1lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlc29sdmVSZXF1ZXN0RG9jdW1lbnQiLCJncmFwaHFsXzEiLCJyZXF1aXJlIiwiZXh0cmFjdE9wZXJhdGlvbk5hbWUiLCJkb2N1bWVudCIsIm9wZXJhdGlvbk5hbWUiLCJ1bmRlZmluZWQiLCJvcGVyYXRpb25EZWZpbml0aW9ucyIsImRlZmluaXRpb25zIiwiZmlsdGVyIiwiZGVmaW5pdGlvbiIsImtpbmQiLCJsZW5ndGgiLCJuYW1lIiwicGFyc2VkRG9jdW1lbnQiLCJwYXJzZSIsImVyciIsInF1ZXJ5IiwicHJpbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/resolveRequestDocument.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql-request/build/cjs/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/cjs/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ClientError = void 0;\nclass ClientError extends Error {\n    constructor(response, request){\n        const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n            response,\n            request\n        })}`;\n        super(message);\n        Object.setPrototypeOf(this, ClientError.prototype);\n        this.response = response;\n        this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === `function`) {\n            Error.captureStackTrace(this, ClientError);\n        }\n    }\n    static extractMessage(response) {\n        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;\n    }\n}\nexports.ClientError = ClientError; //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2Nqcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRSxvQkFBb0JDO0lBQ3RCQyxZQUFZQyxRQUFRLEVBQUVDLE9BQU8sQ0FBRTtRQUMzQixNQUFNQyxVQUFVLENBQUMsRUFBRUwsWUFBWU0sY0FBYyxDQUFDSCxVQUFVLEVBQUUsRUFBRUksS0FBS0MsU0FBUyxDQUFDO1lBQ3ZFTDtZQUNBQztRQUNKLEdBQUcsQ0FBQztRQUNKLEtBQUssQ0FBQ0M7UUFDTlQsT0FBT2EsY0FBYyxDQUFDLElBQUksRUFBRVQsWUFBWVUsU0FBUztRQUNqRCxJQUFJLENBQUNQLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsOERBQThEO1FBQzlELElBQUksT0FBT0gsTUFBTVUsaUJBQWlCLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMvQ1YsTUFBTVUsaUJBQWlCLENBQUMsSUFBSSxFQUFFWDtRQUNsQztJQUNKO0lBQ0EsT0FBT00sZUFBZUgsUUFBUSxFQUFFO1FBQzVCLE9BQU9BLFNBQVNTLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRVAsV0FBVyxDQUFDLHFCQUFxQixFQUFFRixTQUFTVSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RGO0FBQ0o7QUFDQWYsbUJBQW1CLEdBQUdFLGFBQ3RCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtc2VydmljZS13ZWItYXBwLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9janMvdHlwZXMuanM/MDE3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2xpZW50RXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZSwgcmVxdWVzdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7Q2xpZW50RXJyb3IuZXh0cmFjdE1lc3NhZ2UocmVzcG9uc2UpfTogJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgIH0pfWA7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2xpZW50RXJyb3IucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgICAvLyB0aGlzIGlzIG5lZWRlZCBhcyBTYWZhcmkgZG9lc24ndCBzdXBwb3J0IC5jYXB0dXJlU3RhY2tUcmFjZVxuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSBgZnVuY3Rpb25gKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDbGllbnRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGV4dHJhY3RNZXNzYWdlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5lcnJvcnM/LlswXT8ubWVzc2FnZSA/PyBgR3JhcGhRTCBFcnJvciAoQ29kZTogJHtyZXNwb25zZS5zdGF0dXN9KWA7XG4gICAgfVxufVxuZXhwb3J0cy5DbGllbnRFcnJvciA9IENsaWVudEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2xpZW50RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwicmVzcG9uc2UiLCJyZXF1ZXN0IiwibWVzc2FnZSIsImV4dHJhY3RNZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJlcnJvcnMiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql-request/build/cjs/types.js\n");

/***/ })

};
;